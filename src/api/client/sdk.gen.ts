// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { DeleteAuthorByIdData, DeleteAuthorByIdResponse, DeleteAuthorByIdError, GetAuthorByIdData, GetAuthorByIdResponse, GetAuthorByIdError, UpdateAuthorByIdData, UpdateAuthorByIdResponse, UpdateAuthorByIdError, DeleteAuthorImageByIdData, DeleteAuthorImageByIdError, GetAuthorImageByIdData, GetAuthorImageByIdResponse, GetAuthorImageByIdError, UpdateAuthorImageByIdData, UpdateAuthorImageByIdResponse, UpdateAuthorImageByIdError, AddAuthorImageByIdData, AddAuthorImageByIdResponse, AddAuthorImageByIdError, MatchAuthorByIdData, MatchAuthorByIdResponse, MatchAuthorByIdError, GetEmailSettingsData, GetEmailSettingsResponse, UpdateEmailSettingsData, UpdateEmailSettingsResponse, SendTestEmailData, UpdateEReaderDevicesData, UpdateEReaderDevicesResponse, SendEBookToDeviceData, GetLibrariesData, GetLibrariesResponse, CreateLibraryData, CreateLibraryResponse, CreateLibraryError, DeleteLibraryByIdData, DeleteLibraryByIdResponse, DeleteLibraryByIdError, GetLibraryByIdData, GetLibraryByIdResponse, GetLibraryByIdError, UpdateLibraryByIdData, UpdateLibraryByIdResponse, UpdateLibraryByIdError, GetLibraryAuthorsData, GetLibraryAuthorsResponse, GetLibraryAuthorsError, GetLibraryItemsData, GetLibraryItemsResponse, GetLibraryItemsError, DeleteLibraryIssuesData, DeleteLibraryIssuesResponse, DeleteLibraryIssuesError, GetLibrarySeriesData, GetLibrarySeriesResponse, GetLibrarySeriesError, GetLibrarySeriesByIdData, GetLibrarySeriesByIdResponse, GetLibrarySeriesByIdError, GetNotificationsData, GetNotificationsResponse, GetNotificationsError, ConfigureNotificationSettingsData, ConfigureNotificationSettingsResponse, ConfigureNotificationSettingsError, CreateNotificationData, CreateNotificationResponse, CreateNotificationError, GetNotificationEventDataData, GetNotificationEventDataResponse, GetNotificationEventDataError, SendDefaultTestNotificationData, SendDefaultTestNotificationResponse, SendDefaultTestNotificationError, DeleteNotificationData, DeleteNotificationResponse, DeleteNotificationError, UpdateNotificationData, UpdateNotificationResponse, UpdateNotificationError, SendTestNotificationData, SendTestNotificationResponse, SendTestNotificationError, CreatePodcastData, CreatePodcastResponse, GetPodcastFeedData, GetPodcastFeedResponse, GetFeedsFromOpmlTextData, GetFeedsFromOpmlTextResponse, BulkCreatePodcastsFromOpmlFeedUrlsData, CheckNewEpisodesData, CheckNewEpisodesResponse, ClearEpisodeDownloadQueueData, GetEpisodeDownloadsData, GetEpisodeDownloadsResponse, FindEpisodeData, FindEpisodeResponse, DownloadEpisodesData, QuickMatchEpisodesData, QuickMatchEpisodesResponse, RemoveEpisodeData, RemoveEpisodeResponse, GetEpisodeData, GetEpisodeResponse, UpdateEpisodeData, UpdateEpisodeResponse, GetSeriesData, GetSeriesResponse, GetSeriesError, UpdateSeriesData, UpdateSeriesResponse, UpdateSeriesError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * Delete an author by ID
 * Delete an author by ID. This will remove the author from all books.
 */
export const deleteAuthorById = <ThrowOnError extends boolean = false>(options: Options<DeleteAuthorByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAuthorByIdResponse, DeleteAuthorByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/authors/{id}',
        ...options
    });
};

/**
 * Get an author by ID
 * Get an author by ID. The author's books and series can be included in the response.
 */
export const getAuthorById = <ThrowOnError extends boolean = false>(options: Options<GetAuthorByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAuthorByIdResponse, GetAuthorByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/authors/{id}',
        ...options
    });
};

/**
 * Update an author by ID
 * Update an author by ID. The author's name and description can be updated. This endpoint will merge two authors if the new author name matches another author name in the database.
 */
export const updateAuthorById = <ThrowOnError extends boolean = false>(options: Options<UpdateAuthorByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateAuthorByIdResponse, UpdateAuthorByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/authors/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an author image by author ID
 * Delete an author image by author ID. This will remove the image from the server and the database.
 */
export const deleteAuthorImageById = <ThrowOnError extends boolean = false>(options: Options<DeleteAuthorImageByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteAuthorImageByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/authors/{id}/image',
        ...options
    });
};

/**
 * Get an author image by author ID
 * Get an author image by author ID. The image will be returned in the requested format and size.
 */
export const getAuthorImageById = <ThrowOnError extends boolean = false>(options: Options<GetAuthorImageByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAuthorImageByIdResponse, GetAuthorImageByIdError, ThrowOnError>({
        url: '/api/authors/{id}/image',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update an author image by author ID
 * Update an author image by author ID. The image will be resized if the width, height, or format is provided.
 */
export const updateAuthorImageById = <ThrowOnError extends boolean = false>(options: Options<UpdateAuthorImageByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateAuthorImageByIdResponse, UpdateAuthorImageByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/authors/{id}/image',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add an author image to the server
 * Add an author image to the server. The image will be downloaded from the provided URL and stored on the server.
 */
export const addAuthorImageById = <ThrowOnError extends boolean = false>(options: Options<AddAuthorImageByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddAuthorImageByIdResponse, AddAuthorImageByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/authors/{id}/image',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Match the author against Audible using quick match
 * Match the author against Audible using quick match. Quick match updates the author's description and image (if no image already existed) with information from audible. Either `asin` or `q` must be provided, with `asin` taking priority if both are provided.
 */
export const matchAuthorById = <ThrowOnError extends boolean = false>(options: Options<MatchAuthorByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MatchAuthorByIdResponse, MatchAuthorByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/authors/{id}/match',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get email settings
 * Get email settings for sending e-books to e-readers.
 */
export const getEmailSettings = <ThrowOnError extends boolean = false>(options?: Options<GetEmailSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetEmailSettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/emails/settings',
        ...options
    });
};

/**
 * Update email settings
 */
export const updateEmailSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateEmailSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateEmailSettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/emails/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Send test email
 */
export const sendTestEmail = <ThrowOnError extends boolean = false>(options?: Options<SendTestEmailData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/emails/test',
        ...options
    });
};

/**
 * Update e-reader devices
 */
export const updateEReaderDevices = <ThrowOnError extends boolean = false>(options: Options<UpdateEReaderDevicesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateEReaderDevicesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/emails/ereader-devices',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Send ebook to device
 */
export const sendEBookToDevice = <ThrowOnError extends boolean = false>(options: Options<SendEBookToDeviceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/emails/send-ebook-to-device',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all libraries on server
 * Get all libraries on server.
 */
export const getLibraries = <ThrowOnError extends boolean = false>(options?: Options<GetLibrariesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLibrariesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/libraries',
        ...options
    });
};

/**
 * Create a new library on server
 * Create a new library on server.
 */
export const createLibrary = <ThrowOnError extends boolean = false>(options?: Options<CreateLibraryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateLibraryResponse, CreateLibraryError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/libraries',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a single library by ID on server
 * Delete a single library by ID on server and return the deleted object.
 */
export const deleteLibraryById = <ThrowOnError extends boolean = false>(options: Options<DeleteLibraryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLibraryByIdResponse, DeleteLibraryByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/libraries/{id}',
        ...options
    });
};

/**
 * Get a single library by ID on server
 * Get a single library by ID on server.
 */
export const getLibraryById = <ThrowOnError extends boolean = false>(options: Options<GetLibraryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLibraryByIdResponse, GetLibraryByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/libraries/{id}',
        ...options
    });
};

/**
 * Update a single library by ID on server
 * Update a single library by ID on server.
 */
export const updateLibraryById = <ThrowOnError extends boolean = false>(options: Options<UpdateLibraryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateLibraryByIdResponse, UpdateLibraryByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/libraries/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all authors in a library
 * Get all authors in a library by ID on server.
 */
export const getLibraryAuthors = <ThrowOnError extends boolean = false>(options: Options<GetLibraryAuthorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLibraryAuthorsResponse, GetLibraryAuthorsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/libraries/{id}/authors',
        ...options
    });
};

/**
 * Get items in a library
 * Get items in a library by ID on server.
 */
export const getLibraryItems = <ThrowOnError extends boolean = false>(options: Options<GetLibraryItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLibraryItemsResponse, GetLibraryItemsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/libraries/{id}/items',
        ...options
    });
};

/**
 * Delete items with issues in a library.
 * Delete all items with issues in a library by library ID on the server. This only removes the items from the ABS database and does not delete media files.
 */
export const deleteLibraryIssues = <ThrowOnError extends boolean = false>(options: Options<DeleteLibraryIssuesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLibraryIssuesResponse, DeleteLibraryIssuesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/libraries/{id}/issues',
        ...options
    });
};

/**
 * Get library series
 * Get series in a library. Filtering and sorting can be applied.
 */
export const getLibrarySeries = <ThrowOnError extends boolean = false>(options: Options<GetLibrarySeriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLibrarySeriesResponse, GetLibrarySeriesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/libraries/{id}/series',
        ...options
    });
};

/**
 * @deprecated
 * Get single series in library
 * Get a single series in a library by ID on server. This endpoint is deprecated and `/api/series/{id}` should be used instead.
 */
export const getLibrarySeriesById = <ThrowOnError extends boolean = false>(options: Options<GetLibrarySeriesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLibrarySeriesByIdResponse, GetLibrarySeriesByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/libraries/{id}/series/{seriesId}',
        ...options
    });
};

/**
 * Get notification settings
 * Get all Apprise notification events and notification settings for server.
 */
export const getNotifications = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationsResponse, GetNotificationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notifications',
        ...options
    });
};

/**
 * Update select notification settings
 * Update the URL, max failed attempts, and maximum notifications that can be queued for Apprise.
 */
export const configureNotificationSettings = <ThrowOnError extends boolean = false>(options?: Options<ConfigureNotificationSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<ConfigureNotificationSettingsResponse, ConfigureNotificationSettingsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notifications',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create notification settings
 * Create or update Notification settings.
 */
export const createNotification = <ThrowOnError extends boolean = false>(options?: Options<CreateNotificationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateNotificationResponse, CreateNotificationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notifications',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get notification event data
 * Get all Apprise notification event data for the server.
 */
export const getNotificationEventData = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationEventDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationEventDataResponse, GetNotificationEventDataError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notificationdata',
        ...options
    });
};

/**
 * Send general test notification
 * Send a test notification.
 */
export const sendDefaultTestNotification = <ThrowOnError extends boolean = false>(options?: Options<SendDefaultTestNotificationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SendDefaultTestNotificationResponse, SendDefaultTestNotificationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notifications/test',
        ...options
    });
};

/**
 * Delete a notification
 * Delete the notification by ID and return the notification settings.
 */
export const deleteNotification = <ThrowOnError extends boolean = false>(options: Options<DeleteNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNotificationResponse, DeleteNotificationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notifications/{id}',
        ...options
    });
};

/**
 * Update a notification
 * Update an individual Notification by ID
 */
export const updateNotification = <ThrowOnError extends boolean = false>(options: Options<UpdateNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateNotificationResponse, UpdateNotificationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notifications/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Send a test notification
 * Send a test to the given notification by ID.
 */
export const sendTestNotification = <ThrowOnError extends boolean = false>(options: Options<SendTestNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SendTestNotificationResponse, SendTestNotificationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notifications/{id}/test',
        ...options
    });
};

/**
 * Create a new podcast
 */
export const createPodcast = <ThrowOnError extends boolean = false>(options: Options<CreatePodcastData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePodcastResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/podcasts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get podcast feed
 */
export const getPodcastFeed = <ThrowOnError extends boolean = false>(options: Options<GetPodcastFeedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetPodcastFeedResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/podcasts/feed',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get feeds from OPML text
 * Parse OPML text and return an array of feeds
 */
export const getFeedsFromOpmlText = <ThrowOnError extends boolean = false>(options?: Options<GetFeedsFromOpmlTextData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GetFeedsFromOpmlTextResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/podcasts/opml/parse',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Bulk create podcasts from OPML feed URLs
 */
export const bulkCreatePodcastsFromOpmlFeedUrls = <ThrowOnError extends boolean = false>(options?: Options<BulkCreatePodcastsFromOpmlFeedUrlsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/podcasts/opml/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Check and download new episodes
 */
export const checkNewEpisodes = <ThrowOnError extends boolean = false>(options: Options<CheckNewEpisodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CheckNewEpisodesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/podcasts/{id}/checknew',
        ...options
    });
};

/**
 * Clear episode download queue
 */
export const clearEpisodeDownloadQueue = <ThrowOnError extends boolean = false>(options: Options<ClearEpisodeDownloadQueueData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/podcasts/{id}/clear-queue',
        ...options
    });
};

/**
 * Get episode downloads
 */
export const getEpisodeDownloads = <ThrowOnError extends boolean = false>(options: Options<GetEpisodeDownloadsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEpisodeDownloadsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/podcasts/{id}/downloads',
        ...options
    });
};

/**
 * Find episode by title
 */
export const findEpisode = <ThrowOnError extends boolean = false>(options: Options<FindEpisodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindEpisodeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/podcasts/{id}/search-episode',
        ...options
    });
};

/**
 * Download podcast episodes
 */
export const downloadEpisodes = <ThrowOnError extends boolean = false>(options: Options<DownloadEpisodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/podcasts/{id}/download-episodes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Quick match podcast episodes
 */
export const quickMatchEpisodes = <ThrowOnError extends boolean = false>(options: Options<QuickMatchEpisodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QuickMatchEpisodesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/podcasts/{id}/match-episodes',
        ...options
    });
};

/**
 * Remove a podcast episode
 */
export const removeEpisode = <ThrowOnError extends boolean = false>(options: Options<RemoveEpisodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveEpisodeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/podcasts/{id}/episode/{episodeId}',
        ...options
    });
};

/**
 * Get a specific podcast episode
 */
export const getEpisode = <ThrowOnError extends boolean = false>(options: Options<GetEpisodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEpisodeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/podcasts/{id}/episode/{episodeId}',
        ...options
    });
};

/**
 * Update a podcast episode
 */
export const updateEpisode = <ThrowOnError extends boolean = false>(options: Options<UpdateEpisodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateEpisodeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/podcasts/{id}/episode/{episodeId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get series
 * Get a series by ID.
 */
export const getSeries = <ThrowOnError extends boolean = false>(options: Options<GetSeriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSeriesResponse, GetSeriesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/series/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update series
 * Update a series by ID.
 */
export const updateSeries = <ThrowOnError extends boolean = false>(options: Options<UpdateSeriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSeriesResponse, UpdateSeriesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/series/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};