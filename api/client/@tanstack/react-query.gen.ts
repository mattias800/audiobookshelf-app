// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  deleteAuthorById,
  getAuthorById,
  updateAuthorById,
  deleteAuthorImageById,
  getAuthorImageById,
  updateAuthorImageById,
  addAuthorImageById,
  matchAuthorById,
  getEmailSettings,
  updateEmailSettings,
  sendTestEmail,
  updateEReaderDevices,
  sendEBookToDevice,
  getLibraries,
  createLibrary,
  deleteLibraryById,
  getLibraryById,
  updateLibraryById,
  getLibraryAuthors,
  getLibraryItems,
  deleteLibraryIssues,
  getLibrarySeries,
  getLibrarySeriesById,
  getNotifications,
  configureNotificationSettings,
  createNotification,
  getNotificationEventData,
  sendDefaultTestNotification,
  deleteNotification,
  updateNotification,
  sendTestNotification,
  createPodcast,
  getPodcastFeed,
  getFeedsFromOpmlText,
  bulkCreatePodcastsFromOpmlFeedUrls,
  checkNewEpisodes,
  clearEpisodeDownloadQueue,
  getEpisodeDownloads,
  findEpisode,
  downloadEpisodes,
  quickMatchEpisodes,
  removeEpisode,
  getEpisode,
  updateEpisode,
  getSeries,
  updateSeries,
} from "../sdk.gen";
import {
  type UseMutationOptions,
  queryOptions,
  type DefaultError,
  infiniteQueryOptions,
  type InfiniteData,
} from "@tanstack/react-query";
import type {
  DeleteAuthorByIdData,
  DeleteAuthorByIdError,
  DeleteAuthorByIdResponse,
  GetAuthorByIdData,
  UpdateAuthorByIdData,
  UpdateAuthorByIdError,
  UpdateAuthorByIdResponse,
  DeleteAuthorImageByIdData,
  DeleteAuthorImageByIdError,
  GetAuthorImageByIdData,
  UpdateAuthorImageByIdData,
  UpdateAuthorImageByIdError,
  UpdateAuthorImageByIdResponse,
  AddAuthorImageByIdData,
  AddAuthorImageByIdError,
  AddAuthorImageByIdResponse,
  MatchAuthorByIdData,
  MatchAuthorByIdError,
  MatchAuthorByIdResponse,
  GetEmailSettingsData,
  UpdateEmailSettingsData,
  UpdateEmailSettingsResponse,
  SendTestEmailData,
  UpdateEReaderDevicesData,
  UpdateEReaderDevicesResponse,
  SendEBookToDeviceData,
  GetLibrariesData,
  CreateLibraryData,
  CreateLibraryError,
  CreateLibraryResponse,
  DeleteLibraryByIdData,
  DeleteLibraryByIdError,
  DeleteLibraryByIdResponse,
  GetLibraryByIdData,
  UpdateLibraryByIdData,
  UpdateLibraryByIdError,
  UpdateLibraryByIdResponse,
  GetLibraryAuthorsData,
  GetLibraryItemsData,
  GetLibraryItemsError,
  GetLibraryItemsResponse,
  DeleteLibraryIssuesData,
  DeleteLibraryIssuesError,
  DeleteLibraryIssuesResponse,
  GetLibrarySeriesData,
  GetLibrarySeriesError,
  GetLibrarySeriesResponse,
  GetLibrarySeriesByIdData,
  GetLibrarySeriesByIdError,
  GetLibrarySeriesByIdResponse,
  GetNotificationsData,
  ConfigureNotificationSettingsData,
  ConfigureNotificationSettingsError,
  ConfigureNotificationSettingsResponse,
  CreateNotificationData,
  CreateNotificationError,
  CreateNotificationResponse,
  GetNotificationEventDataData,
  SendDefaultTestNotificationData,
  DeleteNotificationData,
  DeleteNotificationError,
  DeleteNotificationResponse,
  UpdateNotificationData,
  UpdateNotificationError,
  UpdateNotificationResponse,
  SendTestNotificationData,
  CreatePodcastData,
  CreatePodcastResponse,
  GetPodcastFeedData,
  GetPodcastFeedResponse,
  GetFeedsFromOpmlTextData,
  GetFeedsFromOpmlTextResponse,
  BulkCreatePodcastsFromOpmlFeedUrlsData,
  CheckNewEpisodesData,
  ClearEpisodeDownloadQueueData,
  GetEpisodeDownloadsData,
  FindEpisodeData,
  DownloadEpisodesData,
  QuickMatchEpisodesData,
  QuickMatchEpisodesResponse,
  RemoveEpisodeData,
  RemoveEpisodeResponse,
  GetEpisodeData,
  UpdateEpisodeData,
  UpdateEpisodeResponse,
  GetSeriesData,
  UpdateSeriesData,
  UpdateSeriesError,
  UpdateSeriesResponse,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export const deleteAuthorByIdMutation = (
  options?: Partial<Options<DeleteAuthorByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteAuthorByIdResponse,
    DeleteAuthorByIdError,
    Options<DeleteAuthorByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAuthorById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const getAuthorByIdQueryKey = (options: Options<GetAuthorByIdData>) => [
  createQueryKey("getAuthorById", options),
];

export const getAuthorByIdOptions = (options: Options<GetAuthorByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthorById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthorByIdQueryKey(options),
  });
};

export const updateAuthorByIdMutation = (
  options?: Partial<Options<UpdateAuthorByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateAuthorByIdResponse,
    UpdateAuthorByIdError,
    Options<UpdateAuthorByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateAuthorById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteAuthorImageByIdMutation = (
  options?: Partial<Options<DeleteAuthorImageByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteAuthorImageByIdError,
    Options<DeleteAuthorImageByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAuthorImageById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAuthorImageByIdQueryKey = (
  options: Options<GetAuthorImageByIdData>,
) => [createQueryKey("getAuthorImageById", options)];

export const getAuthorImageByIdOptions = (
  options: Options<GetAuthorImageByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthorImageById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthorImageByIdQueryKey(options),
  });
};

export const updateAuthorImageByIdMutation = (
  options?: Partial<Options<UpdateAuthorImageByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateAuthorImageByIdResponse,
    UpdateAuthorImageByIdError,
    Options<UpdateAuthorImageByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateAuthorImageById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const addAuthorImageByIdQueryKey = (
  options: Options<AddAuthorImageByIdData>,
) => [createQueryKey("addAuthorImageById", options)];

export const addAuthorImageByIdOptions = (
  options: Options<AddAuthorImageByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await addAuthorImageById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: addAuthorImageByIdQueryKey(options),
  });
};

export const addAuthorImageByIdMutation = (
  options?: Partial<Options<AddAuthorImageByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AddAuthorImageByIdResponse,
    AddAuthorImageByIdError,
    Options<AddAuthorImageByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await addAuthorImageById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const matchAuthorByIdQueryKey = (
  options: Options<MatchAuthorByIdData>,
) => [createQueryKey("matchAuthorById", options)];

export const matchAuthorByIdOptions = (
  options: Options<MatchAuthorByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await matchAuthorById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: matchAuthorByIdQueryKey(options),
  });
};

export const matchAuthorByIdMutation = (
  options?: Partial<Options<MatchAuthorByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    MatchAuthorByIdResponse,
    MatchAuthorByIdError,
    Options<MatchAuthorByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await matchAuthorById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getEmailSettingsQueryKey = (
  options?: Options<GetEmailSettingsData>,
) => [createQueryKey("getEmailSettings", options)];

export const getEmailSettingsOptions = (
  options?: Options<GetEmailSettingsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getEmailSettings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getEmailSettingsQueryKey(options),
  });
};

export const updateEmailSettingsMutation = (
  options?: Partial<Options<UpdateEmailSettingsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateEmailSettingsResponse,
    DefaultError,
    Options<UpdateEmailSettingsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateEmailSettings({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const sendTestEmailQueryKey = (options?: Options<SendTestEmailData>) => [
  createQueryKey("sendTestEmail", options),
];

export const sendTestEmailOptions = (options?: Options<SendTestEmailData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await sendTestEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: sendTestEmailQueryKey(options),
  });
};

export const sendTestEmailMutation = (
  options?: Partial<Options<SendTestEmailData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<SendTestEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await sendTestEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const updateEReaderDevicesQueryKey = (
  options: Options<UpdateEReaderDevicesData>,
) => [createQueryKey("updateEReaderDevices", options)];

export const updateEReaderDevicesOptions = (
  options: Options<UpdateEReaderDevicesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await updateEReaderDevices({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: updateEReaderDevicesQueryKey(options),
  });
};

export const updateEReaderDevicesMutation = (
  options?: Partial<Options<UpdateEReaderDevicesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateEReaderDevicesResponse,
    DefaultError,
    Options<UpdateEReaderDevicesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateEReaderDevices({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const sendEBookToDeviceQueryKey = (
  options: Options<SendEBookToDeviceData>,
) => [createQueryKey("sendEBookToDevice", options)];

export const sendEBookToDeviceOptions = (
  options: Options<SendEBookToDeviceData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await sendEBookToDevice({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: sendEBookToDeviceQueryKey(options),
  });
};

export const sendEBookToDeviceMutation = (
  options?: Partial<Options<SendEBookToDeviceData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<SendEBookToDeviceData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await sendEBookToDevice({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getLibrariesQueryKey = (options?: Options<GetLibrariesData>) => [
  createQueryKey("getLibraries", options),
];

export const getLibrariesOptions = (options?: Options<GetLibrariesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLibraries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLibrariesQueryKey(options),
  });
};

export const createLibraryQueryKey = (options?: Options<CreateLibraryData>) => [
  createQueryKey("createLibrary", options),
];

export const createLibraryOptions = (options?: Options<CreateLibraryData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createLibrary({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createLibraryQueryKey(options),
  });
};

export const createLibraryMutation = (
  options?: Partial<Options<CreateLibraryData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateLibraryResponse,
    CreateLibraryError,
    Options<CreateLibraryData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createLibrary({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteLibraryByIdMutation = (
  options?: Partial<Options<DeleteLibraryByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteLibraryByIdResponse,
    DeleteLibraryByIdError,
    Options<DeleteLibraryByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteLibraryById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getLibraryByIdQueryKey = (
  options: Options<GetLibraryByIdData>,
) => [createQueryKey("getLibraryById", options)];

export const getLibraryByIdOptions = (options: Options<GetLibraryByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLibraryById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLibraryByIdQueryKey(options),
  });
};

export const updateLibraryByIdMutation = (
  options?: Partial<Options<UpdateLibraryByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateLibraryByIdResponse,
    UpdateLibraryByIdError,
    Options<UpdateLibraryByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateLibraryById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getLibraryAuthorsQueryKey = (
  options: Options<GetLibraryAuthorsData>,
) => [createQueryKey("getLibraryAuthors", options)];

export const getLibraryAuthorsOptions = (
  options: Options<GetLibraryAuthorsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLibraryAuthors({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLibraryAuthorsQueryKey(options),
  });
};

export const getLibraryItemsQueryKey = (
  options: Options<GetLibraryItemsData>,
) => [createQueryKey("getLibraryItems", options)];

export const getLibraryItemsOptions = (
  options: Options<GetLibraryItemsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLibraryItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLibraryItemsQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">,
>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = queryKey[0];
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const getLibraryItemsInfiniteQueryKey = (
  options: Options<GetLibraryItemsData>,
): QueryKey<Options<GetLibraryItemsData>> => [
  createQueryKey("getLibraryItems", options, true),
];

export const getLibraryItemsInfiniteOptions = (
  options: Options<GetLibraryItemsData>,
) => {
  return infiniteQueryOptions<
    GetLibraryItemsResponse,
    GetLibraryItemsError,
    InfiniteData<GetLibraryItemsResponse>,
    QueryKey<Options<GetLibraryItemsData>>,
    | number
    | Pick<
        QueryKey<Options<GetLibraryItemsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetLibraryItemsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getLibraryItems({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getLibraryItemsInfiniteQueryKey(options),
    },
  );
};

export const deleteLibraryIssuesMutation = (
  options?: Partial<Options<DeleteLibraryIssuesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteLibraryIssuesResponse,
    DeleteLibraryIssuesError,
    Options<DeleteLibraryIssuesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteLibraryIssues({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getLibrarySeriesQueryKey = (
  options: Options<GetLibrarySeriesData>,
) => [createQueryKey("getLibrarySeries", options)];

export const getLibrarySeriesOptions = (
  options: Options<GetLibrarySeriesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLibrarySeries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLibrarySeriesQueryKey(options),
  });
};

export const getLibrarySeriesInfiniteQueryKey = (
  options: Options<GetLibrarySeriesData>,
): QueryKey<Options<GetLibrarySeriesData>> => [
  createQueryKey("getLibrarySeries", options, true),
];

export const getLibrarySeriesInfiniteOptions = (
  options: Options<GetLibrarySeriesData>,
) => {
  return infiniteQueryOptions<
    GetLibrarySeriesResponse,
    GetLibrarySeriesError,
    InfiniteData<GetLibrarySeriesResponse>,
    QueryKey<Options<GetLibrarySeriesData>>,
    | number
    | Pick<
        QueryKey<Options<GetLibrarySeriesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetLibrarySeriesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getLibrarySeries({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getLibrarySeriesInfiniteQueryKey(options),
    },
  );
};

export const getLibrarySeriesByIdQueryKey = (
  options: Options<GetLibrarySeriesByIdData>,
) => [createQueryKey("getLibrarySeriesById", options)];

export const getLibrarySeriesByIdOptions = (
  options: Options<GetLibrarySeriesByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLibrarySeriesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLibrarySeriesByIdQueryKey(options),
  });
};

export const getLibrarySeriesByIdInfiniteQueryKey = (
  options: Options<GetLibrarySeriesByIdData>,
): QueryKey<Options<GetLibrarySeriesByIdData>> => [
  createQueryKey("getLibrarySeriesById", options, true),
];

export const getLibrarySeriesByIdInfiniteOptions = (
  options: Options<GetLibrarySeriesByIdData>,
) => {
  return infiniteQueryOptions<
    GetLibrarySeriesByIdResponse,
    GetLibrarySeriesByIdError,
    InfiniteData<GetLibrarySeriesByIdResponse>,
    QueryKey<Options<GetLibrarySeriesByIdData>>,
    | number
    | Pick<
        QueryKey<Options<GetLibrarySeriesByIdData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetLibrarySeriesByIdData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getLibrarySeriesById({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getLibrarySeriesByIdInfiniteQueryKey(options),
    },
  );
};

export const getNotificationsQueryKey = (
  options?: Options<GetNotificationsData>,
) => [createQueryKey("getNotifications", options)];

export const getNotificationsOptions = (
  options?: Options<GetNotificationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getNotifications({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getNotificationsQueryKey(options),
  });
};

export const configureNotificationSettingsMutation = (
  options?: Partial<Options<ConfigureNotificationSettingsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ConfigureNotificationSettingsResponse,
    ConfigureNotificationSettingsError,
    Options<ConfigureNotificationSettingsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await configureNotificationSettings({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createNotificationQueryKey = (
  options?: Options<CreateNotificationData>,
) => [createQueryKey("createNotification", options)];

export const createNotificationOptions = (
  options?: Options<CreateNotificationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createNotification({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createNotificationQueryKey(options),
  });
};

export const createNotificationMutation = (
  options?: Partial<Options<CreateNotificationData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateNotificationResponse,
    CreateNotificationError,
    Options<CreateNotificationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createNotification({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getNotificationEventDataQueryKey = (
  options?: Options<GetNotificationEventDataData>,
) => [createQueryKey("getNotificationEventData", options)];

export const getNotificationEventDataOptions = (
  options?: Options<GetNotificationEventDataData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getNotificationEventData({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getNotificationEventDataQueryKey(options),
  });
};

export const sendDefaultTestNotificationQueryKey = (
  options?: Options<SendDefaultTestNotificationData>,
) => [createQueryKey("sendDefaultTestNotification", options)];

export const sendDefaultTestNotificationOptions = (
  options?: Options<SendDefaultTestNotificationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await sendDefaultTestNotification({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: sendDefaultTestNotificationQueryKey(options),
  });
};

export const deleteNotificationMutation = (
  options?: Partial<Options<DeleteNotificationData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteNotificationResponse,
    DeleteNotificationError,
    Options<DeleteNotificationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteNotification({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const updateNotificationMutation = (
  options?: Partial<Options<UpdateNotificationData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateNotificationResponse,
    UpdateNotificationError,
    Options<UpdateNotificationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateNotification({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const sendTestNotificationQueryKey = (
  options: Options<SendTestNotificationData>,
) => [createQueryKey("sendTestNotification", options)];

export const sendTestNotificationOptions = (
  options: Options<SendTestNotificationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await sendTestNotification({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: sendTestNotificationQueryKey(options),
  });
};

export const createPodcastQueryKey = (options: Options<CreatePodcastData>) => [
  createQueryKey("createPodcast", options),
];

export const createPodcastOptions = (options: Options<CreatePodcastData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createPodcast({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createPodcastQueryKey(options),
  });
};

export const createPodcastMutation = (
  options?: Partial<Options<CreatePodcastData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreatePodcastResponse,
    DefaultError,
    Options<CreatePodcastData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createPodcast({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getPodcastFeedQueryKey = (
  options: Options<GetPodcastFeedData>,
) => [createQueryKey("getPodcastFeed", options)];

export const getPodcastFeedOptions = (options: Options<GetPodcastFeedData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getPodcastFeed({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getPodcastFeedQueryKey(options),
  });
};

export const getPodcastFeedMutation = (
  options?: Partial<Options<GetPodcastFeedData>>,
) => {
  const mutationOptions: UseMutationOptions<
    GetPodcastFeedResponse,
    DefaultError,
    Options<GetPodcastFeedData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await getPodcastFeed({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getFeedsFromOpmlTextQueryKey = (
  options?: Options<GetFeedsFromOpmlTextData>,
) => [createQueryKey("getFeedsFromOpmlText", options)];

export const getFeedsFromOpmlTextOptions = (
  options?: Options<GetFeedsFromOpmlTextData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFeedsFromOpmlText({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getFeedsFromOpmlTextQueryKey(options),
  });
};

export const getFeedsFromOpmlTextMutation = (
  options?: Partial<Options<GetFeedsFromOpmlTextData>>,
) => {
  const mutationOptions: UseMutationOptions<
    GetFeedsFromOpmlTextResponse,
    DefaultError,
    Options<GetFeedsFromOpmlTextData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await getFeedsFromOpmlText({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const bulkCreatePodcastsFromOpmlFeedUrlsQueryKey = (
  options?: Options<BulkCreatePodcastsFromOpmlFeedUrlsData>,
) => [createQueryKey("bulkCreatePodcastsFromOpmlFeedUrls", options)];

export const bulkCreatePodcastsFromOpmlFeedUrlsOptions = (
  options?: Options<BulkCreatePodcastsFromOpmlFeedUrlsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await bulkCreatePodcastsFromOpmlFeedUrls({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: bulkCreatePodcastsFromOpmlFeedUrlsQueryKey(options),
  });
};

export const bulkCreatePodcastsFromOpmlFeedUrlsMutation = (
  options?: Partial<Options<BulkCreatePodcastsFromOpmlFeedUrlsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<BulkCreatePodcastsFromOpmlFeedUrlsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await bulkCreatePodcastsFromOpmlFeedUrls({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const checkNewEpisodesQueryKey = (
  options: Options<CheckNewEpisodesData>,
) => [createQueryKey("checkNewEpisodes", options)];

export const checkNewEpisodesOptions = (
  options: Options<CheckNewEpisodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await checkNewEpisodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: checkNewEpisodesQueryKey(options),
  });
};

export const clearEpisodeDownloadQueueQueryKey = (
  options: Options<ClearEpisodeDownloadQueueData>,
) => [createQueryKey("clearEpisodeDownloadQueue", options)];

export const clearEpisodeDownloadQueueOptions = (
  options: Options<ClearEpisodeDownloadQueueData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await clearEpisodeDownloadQueue({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: clearEpisodeDownloadQueueQueryKey(options),
  });
};

export const getEpisodeDownloadsQueryKey = (
  options: Options<GetEpisodeDownloadsData>,
) => [createQueryKey("getEpisodeDownloads", options)];

export const getEpisodeDownloadsOptions = (
  options: Options<GetEpisodeDownloadsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getEpisodeDownloads({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getEpisodeDownloadsQueryKey(options),
  });
};

export const findEpisodeQueryKey = (options: Options<FindEpisodeData>) => [
  createQueryKey("findEpisode", options),
];

export const findEpisodeOptions = (options: Options<FindEpisodeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await findEpisode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: findEpisodeQueryKey(options),
  });
};

export const downloadEpisodesQueryKey = (
  options: Options<DownloadEpisodesData>,
) => [createQueryKey("downloadEpisodes", options)];

export const downloadEpisodesOptions = (
  options: Options<DownloadEpisodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await downloadEpisodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: downloadEpisodesQueryKey(options),
  });
};

export const downloadEpisodesMutation = (
  options?: Partial<Options<DownloadEpisodesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DownloadEpisodesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await downloadEpisodes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const quickMatchEpisodesQueryKey = (
  options: Options<QuickMatchEpisodesData>,
) => [createQueryKey("quickMatchEpisodes", options)];

export const quickMatchEpisodesOptions = (
  options: Options<QuickMatchEpisodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await quickMatchEpisodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: quickMatchEpisodesQueryKey(options),
  });
};

export const quickMatchEpisodesMutation = (
  options?: Partial<Options<QuickMatchEpisodesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    QuickMatchEpisodesResponse,
    DefaultError,
    Options<QuickMatchEpisodesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await quickMatchEpisodes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const removeEpisodeMutation = (
  options?: Partial<Options<RemoveEpisodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RemoveEpisodeResponse,
    DefaultError,
    Options<RemoveEpisodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await removeEpisode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getEpisodeQueryKey = (options: Options<GetEpisodeData>) => [
  createQueryKey("getEpisode", options),
];

export const getEpisodeOptions = (options: Options<GetEpisodeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getEpisode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getEpisodeQueryKey(options),
  });
};

export const updateEpisodeMutation = (
  options?: Partial<Options<UpdateEpisodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateEpisodeResponse,
    DefaultError,
    Options<UpdateEpisodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateEpisode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getSeriesQueryKey = (options: Options<GetSeriesData>) => [
  createQueryKey("getSeries", options),
];

export const getSeriesOptions = (options: Options<GetSeriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSeries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getSeriesQueryKey(options),
  });
};

export const updateSeriesMutation = (
  options?: Partial<Options<UpdateSeriesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateSeriesResponse,
    UpdateSeriesError,
    Options<UpdateSeriesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateSeries({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
